1) Obtenir l’utilisateur ayant le prénom "Muriel" et le mot de passe (en clair) "test11", sachant que l’encodage du mot de passe est effectué avec l’algorithme Sha1.

SELECT *
FROM `client`
WHERE prenom = "Muriel"
AND `password` = SHA1("test11");


2) Obtenir la liste de tous les produits qui sont présent sur plusieurs commandes.

SELECT nom, COUNT(*) AS nbr_items 
FROM `commande_ligne` 
GROUP BY nom HAVING nbr_items > 1
ORDER BY nbr_items DESC;



3) Obtenir la liste de tous les produits qui sont présent sur plusieurs commandes et y ajouter une colonne qui liste les identifiants des commandes associées.

SELECT nom, COUNT(*) AS nbr_items, GROUP_CONCAT(commande_id) 
FROM `commande_ligne` 
GROUP BY nom HAVING nbr_items > 1;


4) Enregistrer le prix total à l’intérieur de chaque ligne des commandes, en fonction du prix unitaire et de la quantité

UPDATE commande_ligne
SET prix_total = prix_unitaire * quantite;


5) Obtenir le montant total pour chaque commande et y voir facilement la date associée à cette commande ainsi que le prénom et nom du client associé

SELECT `client`.nom, `client`.prenom, DATE_FORMAT(commande.date_achat,"%d %M %Y") AS `date`, ROUND(SUM(commande_ligne.prix_total), 2) AS prix_commande
FROM commande
INNER JOIN commande_ligne
ON commande.id = commande_ligne.commande_id
INNER JOIN `client`
ON commande.client_id = `client`.id
GROUP BY commande.id;


6) (Attention - question difficile) Enregistrer le montant total de chaque commande dans le champ intitulé “cache_prix_total”

UPDATE commande A
INNER JOIN (
	SELECT commande_ligne.commande_id, ROUND(SUM(commande_ligne.prix_total), 2) AS sumPrix
	FROM commande_ligne
	GROUP BY commande_ligne.commande_id
) B
ON A.id = B.commande_id
SET A.cache_prix_total = B.sumPrix
WHERE A.id = B.commande_id;


7) Obtenir le montant global de toutes les commandes, pour chaque mois 

SELECT MONTH(commande.date_achat) AS month_achat, ROUND(SUM(commande.cache_prix_total)) AS total_mois
FROM commande
GROUP BY month_achat;


8) Obtenir la liste des 10 clients qui ont effectué le plus grand montant de commandes, et obtenir ce montant total pour chaque client.

SELECT `client`.nom, ROUND(SUM(commande_ligne.prix_total), 2) AS prix_commande
FROM commande
INNER JOIN commande_ligne
ON commande.id = commande_ligne.commande_id
INNER JOIN `client`
ON commande.client_id = `client`.id
GROUP BY `client`.id
ORDER BY prix_commande DESC
LIMIT 10;


9) Obtenir le montant total des commandes pour chaque date

SELECT commande.date_achat, ROUND(SUM(commande.cache_prix_total)) AS total
FROM commande
GROUP BY commande.date_achat;


10) Ajouter une colonne intitulée “category” à la table contenant les commandes. Cette colonne contiendra une valeur numérique

ALTER TABLE commande
ADD category INT;


11) Enregistrer la valeur de la catégorie, en suivant les règles suivantes :
“1” pour les commandes de moins de 200€
“2” pour les commandes entre 200€ et 500€
“3” pour les commandes entre 500€ et 1.000€
“4” pour les commandes supérieures à 1.000€

UPDATE commande
SET category = CASE 
WHEN cache_prix_total <= 200 THEN 1
WHEN cache_prix_total > 200 AND cache_prix_total <= 500 THEN 2
WHEN cache_prix_total > 500 AND cache_prix_total <= 1000 THEN 3
ELSE 4
END;


12) Créer une table intitulée “commande_category” qui contiendra le descriptif de ces catégories

CREATE TABLE formation.commande_category (
	id INT (1),
	description VARCHAR (40)
);


13) Insérer les 4 descriptifs de chaque catégorie au sein de la table précédemment créée

INSERT INTO commande_category (id, description)
VALUES 
(1, "pour les commandes de moins de 200€"),
(2, "pour les commandes entre 200€ et 500€"),
(3, "pour les commandes entre 500€ et 1.000€"),
(4, "pour les commandes supérieures à 1.000€");


14) Supprimer toutes les commandes (et les lignes des commandes) inférieur au 1er février 2019.
Cela doit être effectué en 2 requêtes maximum

// Partie commande_ligne
DELETE commande_ligne
FROM commande_ligne
INNER JOIN commande ON commande_ligne.commande_id = commande.id
WHERE commande.date_achat < '2019-02-01';

// Partie commande
DELETE 
FROM commande
WHERE commande.date_achat < '2019-02-01';
